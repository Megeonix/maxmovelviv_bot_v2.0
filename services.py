from aiogram.types import Message
from aiogram.utils.formatting import Bold, Text
from geopy.point import Point
from geopy.distance import geodesic
from config import LVIV_CENTER

def get_hint_location() -> str:
    return (
        "üìç <b>–©–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é:</b>\n"
        "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Å–∫—Ä–µ–ø–∫—É üìé –∞–±–æ –∫–Ω–æ–ø–∫—É ‚ûï –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–µ–¥–µ–Ω–Ω—è\n"
        "2. –û–±–µ—Ä—ñ—Ç—å ‚Äú–õ–æ–∫–∞—Ü—ñ—è‚Äù\n"
        "3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ—á–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\n"
    )

def is_point_outside_lviv(user_point: Point, radius_km: float = 13.0) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–æ—á–∫–∞ –∑–∞ –º–µ–∂–∞–º–∏ –õ—å–≤–æ–≤–∞ (—É–º–æ–≤–Ω–∏–π —Ä–∞–¥—ñ—É—Å 13 –∫–º –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)."""
    return geodesic((user_point.latitude, user_point.longitude), LVIV_CENTER).km > radius_km

def format_order_summary(data: dict) -> str:
    """–§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø—ñ–¥—Å—É–º–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    lines = [
        f"<b>–¢–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:</b> {data.get('delivery_type', '-')}",
        f"<b>–ü–æ—Å–ª—É–≥–∞:</b> {data.get('service_type', '-')}",
        f"<b>–¢–∏–ø –∞–≤—Ç–æ:</b> {data.get('vehicle_type', '-')}",
        f"<b>–¢–∏–ø –≤–∞–Ω—Ç–∞–∂–Ω–∏—Ö —Ä–æ–±—ñ—Ç:</b> {data.get('loading_type', '-')}",
        f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω:</b> {data.get('hours', '-')}",
        f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å:</b> {data.get('units', '-')}",
        f"<b>–ü–æ–≤–µ—Ä—Ö—ñ–≤ (–±–µ–∑ –ª—ñ—Ñ—Ç–∞):</b> {data.get('floors', '-')}",
        f"<b>–Ñ –ª—ñ—Ñ—Ç:</b> {'–¢–∞–∫' if data.get('by_elevator') else '–ù—ñ'}",
        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {data.get('phone', '-')}",
        f"<b>–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</b> <u>{data.get('price', '–Ω–µ –≤–∫–∞–∑–∞–Ω–∞')}</u>",
    ]

    if 'custom_note' in data:
        lines.append(f"<b>–û–ø–∏—Å:</b> {data['custom_note']}")

    return "\n".join([line for line in lines if line])
